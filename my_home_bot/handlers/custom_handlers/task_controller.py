from loader import bot
from core.core import *
from keyboards import *
from datetime import datetime

some_data = {}


@bot.callback_query_handler(func=lambda call: call.data == "tasks")
def handle_tasks_button(call):
    bot.delete_message(call.from_user.id, call.message.message_id)
    user = check_or_add_user(call.from_user.id)
    user_tasks = get_tasks(user.get('id'))

    keyboard = InlineKeyboardMarkup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    start_menu = start_menu_buttons(True)
    create = create_task(True)

    if user_tasks:
        task_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö
        for task in user_tasks:
            task_status = "üü¢|" if task['status'] == 'new' else "üî¥|"  # –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            task_text = task['task']
            task_date = str(datetime.fromtimestamp(task['plane_date']).strftime('%d.%m'))+ "|"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã


            message = task_status + task_date + task_text
            button = correct_task_buttons(message, task['id'], True)
            keyboard.add(button)



        keyboard.add(start_menu, create)

        bot.send_message(call.from_user.id,  '–ó–∞–¥–∞—á–∏', reply_markup=keyboard)
    else:
        keyboard.add(start_menu, create)
        bot.send_message(call.from_user.id, '–ó–∞–¥–∞—á—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("correct_task_"))
def handle_edit_task(call):
    # —Ç—É—Ç –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    try:
        some, _, task_id, delete_flag = call.data.split('_')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if delete_flag == '1':
            bot.delete_message(call.from_user.id, call.message.message_id)
    except Exception as e:
        pass
    user = check_or_add_user(call.from_user.id)

    task_id = call.data.split('_')[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task = get_tasks(id_user=user.get('id'), id_task=int(task_id))[0]
    message = f"–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞: {convert_unix_time(task['plane_date'], '–¥–¥.–º–º.–≥–≥–≥–≥')}\n"
    message += f"–°—Ç–∞—Ç—É—Å: {'–ù–æ–≤–∞—è' if task['status'] == 'new' else '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'}\n\n"
    message += f"–ó–∞–¥–∞—á–∞: {task['task']}\n"
    back_but = back_buttons('tasks', True)

    del_but, ed_but = task_edit_buttons(int(task_id), True)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(del_but, ed_but)
    keyboard.add(back_but)
    bot.send_message(call.from_user.id, message, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("del_task_"))
def handle_del_task(call):
    # —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    bot.delete_message(call.from_user.id, call.message.message_id)
    task_id = call.data.split('_')[2]
    delete_task(task_id)
    bot.send_message(call.from_user.id, '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=back_buttons('tasks'))


@bot.callback_query_handler(func=lambda call: call.data.startswith("task_edit_"))
def handle_correct_task(call):
    #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
    bot.delete_message(call.from_user.id, call.message.message_id)
    task_id = call.data.split('_')[2]
    bot.send_message(call.from_user.id, '–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=back_buttons('tasks'))




@bot.callback_query_handler(func=lambda call: call.data == "add_task")
def handle_add_task(call):
    # –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    bot.delete_message(call.from_user.id, call.message.message_id)
    change_user(call.from_user.id, 'states', 'add_task')
    bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', reply_markup=back_buttons('tasks'))


@bot.message_handler(func=lambda message: check_or_add_user(message.from_user.id).get('states') == 'add_task')
def add_new_task(message):
    global some_data
    some_data = message.text

    show_calendar(message.from_user.id, datetime.utcnow() + timedelta(hours=3))




def show_calendar(user_id, date):
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    first_day = date.replace(day=1)
    last_day = (first_day + timedelta(days=32)).replace(day=1) - timedelta(days=1)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    keyboard = InlineKeyboardMarkup()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    header = f"{first_day.strftime('%B %Y')}"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = (datetime.utcnow() + timedelta(hours=3)).date()

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "<" –µ—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    if first_day.month == today.month and first_day.year == today.year:
        keyboard.row(
            InlineKeyboardButton(" ", callback_data="ignore"),
            InlineKeyboardButton(header, callback_data="ignore"),
            InlineKeyboardButton(">", callback_data=f"next_month_{first_day.month}_{first_day.year}")
        )
    else:
        keyboard.row(
            InlineKeyboardButton("<", callback_data=f"prev_month_{first_day.month}_{first_day.year}"),
            InlineKeyboardButton(header, callback_data="ignore"),
            InlineKeyboardButton(">", callback_data=f"next_month_{first_day.month}_{first_day.year}")
        )

    # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–µ—Å—è—Ü (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6)
    start_weekday = (first_day.weekday() + 6) % 7  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –±—ã–ª –Ω–∞—á–∞–ª–æ–º
    if start_weekday != 0:
        start_weekday += 1

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞, –µ—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    week = []
    for _ in range(start_weekday):
        week.append(InlineKeyboardButton(" ", callback_data="ignore"))

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for day in range(1, (last_day - first_day).days + 2):
        current_date = first_day.replace(day=day).date()

        if current_date < today and current_date >= today - timedelta(days=today.weekday()):
            # –î–Ω–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏, –¥–µ–ª–∞–µ–º –ø—É—Å—Ç—ã–º–∏
            week.append(InlineKeyboardButton(" ", callback_data="ignore"))
        elif current_date >= today:
            # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–∏
            week.append(InlineKeyboardButton(f"{day}", callback_data=f"select_date_{current_date.strftime('%d.%m.%Y')}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—é –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ª–Ω–∞—è (7 –∫–Ω–æ–ø–æ–∫)
        if len(week) == 7:
            keyboard.row(*week)
            week = []

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    next_month_day = 1
    while len(week) < 7:
        current_date = last_day + timedelta(days=next_month_day)
        week.append(InlineKeyboardButton(f"{next_month_day}", callback_data=f"select_date_{current_date.strftime('%d.%m.%Y')}"))
        next_month_day += 1

    if week:
        keyboard.row(*week)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='tasks'))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)



@bot.callback_query_handler(func=lambda call: call.data.startswith("prev_month_"))
def handle_prev_month(call):
    bot.delete_message(call.from_user.id, call.message.message_id)

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥
    try:
        month, year = map(int, call.data.split("_")[2:])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
        # –£–º–µ–Ω—å—à–∞–µ–º –º–µ—Å—è—Ü –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
        if month == 1:  # –Ø–Ω–≤–∞—Ä—å
            month = 12
            year -= 1
        else:
            month -= 1
        date = datetime(year, month, 1)
        show_calendar(call.from_user.id, date)
    except ValueError:
        bot.send_message(call.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("next_month_"))
def handle_next_month(call):
    bot.delete_message(call.from_user.id, call.message.message_id)

    month, year = map(int, call.data.split("_")[2:])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Å—è—Ü –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
    if month == 12:  # –î–µ–∫–∞–±—Ä—å
        month = 1
        year += 1
    else:
        month += 1
    date = datetime(year, month, 1)
    show_calendar(call.from_user.id, date)



@bot.callback_query_handler(func=lambda call: call.data.startswith("select_date_"))
def handle_date_selection(call):
    user = check_or_add_user(call.from_user.id)
    global some_data
    bot.delete_message(call.from_user.id, call.message.message_id)
    selected_date = call.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    unix_select_date = convert_to_unix(selected_date)

    add_task(user.get('id'), some_data, unix_select_date)

    bot.send_message(call.from_user.id, f"–ó–∞–¥–∞—á–∞ '{some_data}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ !", reply_markup=back_buttons('tasks'))


